version: '3.8'

services:
  # MySQL Database for Production
  mysql-prod:
    image: mysql:8
    container_name: case-observer-mysql-prod
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./backups:/backups
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - case-observer-network
    restart: unless-stopped

  # Redis for Production
  redis-prod:
    image: redis:7-alpine
    container_name: case-observer-redis-prod
    command: redis-server --appendonly yes
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - case-observer-network
    restart: unless-stopped

  # Spring Boot Application
  backend-prod:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: case-observer-backend-prod
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_HOST=mysql-prod
      - DB_PORT=3306
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - PORTAL_API_KEY=${PORTAL_API_KEY}
    depends_on:
      mysql-prod:
        condition: service_healthy
      redis-prod:
        condition: service_healthy
    networks:
      - case-observer-network
    restart: unless-stopped
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mysql_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  case-observer-network:
    driver: bridge
